import os
import cv2
import numpy as np
import time
from typing import Dict

# Gi·∫£ ƒë·ªãnh c√°c file n√†y n·∫±m c√πng c·∫•p th∆∞ m·ª•c
from license_plate_utils import normalize_plate, segment_characters
from libert import load_tflite_interpreter, run_cnn_tflite, run_yolo_tflite

# --- C·∫§U H√åNH ---
# YOLO_TFLITE_PATH = r"C:\Users\TriNguyen\Desktop\Code\Python\OpenCV\best_float32.tflite"
YOLO_TFLITE_PATH = "best416_float32.tflite"
CNN_TFLITE_PATH = "character_classifier_int8.tflite"

# C√°c file v√† th∆∞ m·ª•c kh√°c
CLASS_NAMES_PATH = 'class_names.txt'
SOURCE_IMAGE_FOLDER = 'test_img'

def benchmark_pipeline(image: np.ndarray, yolo, cnn, classes) -> Dict[str, float]:
    """
    Ch·∫°y to√†n b·ªô pipeline v√† tr·∫£ v·ªÅ m·ªôt dictionary ch·ª©a th·ªùi gian c·ªßa t·ª´ng b∆∞·ªõc.
    """
    timings = {
        'yolo_detect': 0.0,
        'plate_normalize': 0.0,
        'char_segment': 0.0,
        'char_recognize': 0.0,
        'total': 0.0
    }
    
    overall_start_time = time.time()

    # 1. Ph√°t hi·ªán bi·ªÉn s·ªë (YOLO)
    t0 = time.time()
    boxes = run_yolo_tflite(yolo, image)
    t1 = time.time()
    timings['yolo_detect'] = t1 - t0
    
    # X·ª≠ l√Ω cho t·ª´ng bi·ªÉn s·ªë ƒë∆∞·ª£c ph√°t hi·ªán
    for (x1, y1, x2, y2) in boxes:
        plate_image = image[y1:y2, x1:x2]
        if plate_image.size == 0:
            continue
            
        # 2. Chu·∫©n h√≥a bi·ªÉn s·ªë
        t2 = time.time()
        normalized_plate, _ = normalize_plate(plate_image)
        t3 = time.time()
        timings['plate_normalize'] += (t3 - t2)
        
        # 3. Ph√¢n ƒëo·∫°n k√Ω t·ª±
        t4 = time.time()
        char_data_list, _ = segment_characters(normalized_plate)
        t5 = time.time()
        timings['char_segment'] += (t5 - t4)
        
        # 4. Nh·∫≠n d·∫°ng t·ª´ng k√Ω t·ª± (CNN)
        if char_data_list:
            cnn_time_for_plate = 0.0
            for char_img, _ in char_data_list:
                t6 = time.time()
                _ = run_cnn_tflite(cnn, char_img, classes)
                t7 = time.time()
                cnn_time_for_plate += (t7 - t6)
            timings['char_recognize'] += cnn_time_for_plate
    
    timings['total'] = time.time() - overall_start_time
    return timings

def analyze_component_performance():
    """
    H√†m ch√≠nh ƒë·ªÉ ch·∫°y ph√¢n t√≠ch v√† in ra k·∫øt qu·∫£ chi ti·∫øt t·ª´ng th√†nh ph·∫ßn.
    """
    print("--- B·∫ÆT ƒê·∫¶U PH√ÇN T√çCH HI·ªÜU NƒÇNG T·ª™NG TH√ÄNH PH·∫¶N ---")

    # 1. T·∫£i model v√† t√†i nguy√™n
    print("‚è≥ ƒêang t·∫£i models...")
    yolo_interpreter = load_tflite_interpreter(YOLO_TFLITE_PATH)
    cnn_interpreter = load_tflite_interpreter(CNN_TFLITE_PATH)
    try:
        with open(CLASS_NAMES_PATH, 'r', encoding='utf-8') as f:
            class_names = [line.strip() for line in f]
    except FileNotFoundError:
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file nh√£n: {CLASS_NAMES_PATH}"); return

    if not all([yolo_interpreter, cnn_interpreter, class_names]):
        print("‚ùå Tho√°t do kh√¥ng t·∫£i ƒë∆∞·ª£c model ho·∫∑c file nh√£n."); return
    print("‚úÖ T·∫£i model th√†nh c√¥ng.")

    # 2. L·∫•y danh s√°ch ·∫£nh
    image_files = [f for f in os.listdir(SOURCE_IMAGE_FOLDER) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
    if not image_files:
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y ·∫£nh trong '{SOURCE_IMAGE_FOLDER}'."); return
    
    total_images = len(image_files)
    print(f"üîé T√¨m th·∫•y {total_images} ·∫£nh ƒë·ªÉ ph√¢n t√≠ch.\n")

    # 3. Ch·∫°y v√† thu th·∫≠p d·ªØ li·ªáu
    all_timings = []
    for i, filename in enumerate(image_files):
        print(f"   - ƒêang x·ª≠ l√Ω ·∫£nh {i + 1}/{total_images}: {filename}", end='\r')
        image_path = os.path.join(SOURCE_IMAGE_FOLDER, filename)
        image = cv2.imread(image_path)
        if image is None: continue
        
        timings = benchmark_pipeline(image, yolo_interpreter, cnn_interpreter, class_names)
        all_timings.append(timings)
    
    print("\n\n‚úÖ ƒê√£ x·ª≠ l√Ω xong t·∫•t c·∫£ c√°c ·∫£nh.")

    # 4. Ph√¢n t√≠ch v√† in k·∫øt qu·∫£
    if not all_timings:
        print("Kh√¥ng c√≥ ·∫£nh n√†o ƒë∆∞·ª£c x·ª≠ l√Ω."); return

    # T√≠nh t·ªïng th·ªùi gian cho m·ªói th√†nh ph·∫ßn tr√™n t·∫•t c·∫£ c√°c l·∫ßn ch·∫°y
    avg_timings = {key: 0.0 for key in all_timings[0]}
    for timings in all_timings:
        for key in timings:
            avg_timings[key] += timings[key]
    
    # L·∫•y trung b√¨nh
    num_runs = len(all_timings)
    for key in avg_timings:
        avg_timings[key] /= num_runs

    # In k·∫øt qu·∫£
    total_avg_time_ms = avg_timings['total'] * 1000
    print("\n---üìä K·∫æT QU·∫¢ PH√ÇN T√çCH T·ª™NG TH√ÄNH PH·∫¶N üìä---")
    print("----------------------------------------------------------------")
    print(f"Th·ªùi gian x·ª≠ l√Ω trung b√¨nh t·ªïng th·ªÉ: {total_avg_time_ms:.2f} ms/·∫£nh\n")
    
    print(f"{'Th√†nh ph·∫ßn':<25} | {'Th·ªùi gian (ms)':<15} | {'T·ª∑ tr·ªçng (%)'}")
    print("----------------------------------------------------------------")
    
    for key, avg_time_sec in avg_timings.items():
        if key == 'total': continue
        
        avg_time_ms = avg_time_sec * 1000
        percentage = (avg_time_sec / avg_timings['total']) * 100 if avg_timings['total'] > 0 else 0
        
        print(f"{key:<25} | {avg_time_ms:<15.2f} | {percentage:.2f}%")
        
    print("----------------------------------------------------------------\n")


if __name__ == '__main__':
    print("B·∫Øt ƒë·∫ßu ch·∫°y ch∆∞∆°ng tr√¨nh")
    analyze_component_performance()
